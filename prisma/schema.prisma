// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum TaskPriority {
  LOW
  MEDIUM
  HIGH

  @@map("taskpriority")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  BLOCKED
  REVIEWING
  COMPLETED
  CANCELLED
  DEFERRED
  ARCHIVED

  @@map("taskstatus")
}

enum EventSource {
  LOCAL
  GOOGLE
  TASK
}

enum FlashcardStatus {
  NEW
  LEARNING
  REVIEWING
  MASTERED

  @@map("flashcardstatus")
}

enum StudySessionType {
  POMODORO
  FREESTYLE
  BREAK

  @@map("studysessiontype")
}

// Models
model Account {
  id                String   @id @default(cuid()) @map("id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid()) @map("id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtoken")
}

model User {
  id            String          @id @default(cuid()) @map("id")
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?         @db.Text
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  studysessions StudySession[]
  behavior      UserBehavior[]
  settings      UserSettings?
  profile       Profile?
  calendars     Calendar[]
  flashcardDecks FlashcardDeck[]

  @@map("user")
}

model Profile {
  id                String          @id @default(cuid()) @map("id")
  userId            String          @unique @map("userId")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  timezone          String          @default("UTC")
  studyPreferences  Json?
  learningStyle     String?         // Visual, Auditory, Kinesthetic, Reading/Writing
  productiveHours   Json?           // Array of preferred study hours
  breakPreferences  Json?           // Break timing preferences
  focusTime        Int?            // Typical focus duration in minutes
  distractionLevel String?         // LOW, MEDIUM, HIGH
  energyPattern    String?         // MORNING, AFTERNOON, EVENING
  taskBatchSize    Int?            // Preferred number of tasks to batch
  notifications    Boolean         @default(true)
  emailUpdates     Boolean         @default(true)
  insights         AIInsight[]
  flashcards       Flashcard[]
  tasks            Task[]
  studysessions    StudySession[]
  schedules        Schedule[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([userId])
  @@map("profile")
}

model UserSettings {
  id               String   @id @default(cuid()) @map("id")
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme            String   @default("system")
  language         String   @default("en")
  notifications    Boolean  @default(true)
  autoStartPomodoro Boolean @default(false)
  pomodoroLength   Int      @default(25)
  shortBreakLength Int      @default(5)
  longBreakLength  Int      @default(15)

  @@map("usersettings")
}

model Task {
  id              String       @id @default(cuid()) @map("id")
  title           String
  description     String?      @db.Text
  dueDate         DateTime?
  priority        TaskPriority
  status          TaskStatus
  tags            String       // Comma-separated tags
  estimatedDuration Int?      @map("estimate") // Alias used in code
  actualTime      Int?        // Actual time spent in minutes
  actualDuration  Int?        // Actual duration in minutes
  complexity      Int?        // 1-5 scale
  recurring       Boolean     @default(false)
  recurrenceRule  String?     // iCal RRule format
  reminderBefore  Int?        // Minutes before to remind
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile         Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId       String
  subject         String?     // Subject/category used in code
  parentTaskId    String?     // For subtasks
  parentTask      Task?       @relation("SubTasks", fields: [parentTaskId], references: [id])
  subtasks        Task[]      @relation("SubTasks")
  dependencies    Task[]      @relation("TaskDependencies")
  dependentOn     Task[]      @relation("TaskDependencies")
  studysessions   StudySession[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  completedAt     DateTime?
  calendarId      String?
  calendar        Calendar?   @relation(fields: [calendarId], references: [id])
  schedules       Schedule[]
  source          String      @default("USER")
  color          String?

  @@index([userId, status])
  @@index([dueDate])
  @@map("task")
}

model StudySession {
  id                String   @id @default(cuid()) @map("id")
  taskId            String
  userId            String
  profileId         String
  task              Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile           Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  startedAt         DateTime
  completedAt       DateTime?
  pausedAt          DateTime?
  interruptions     Json?     @map("distractions") // code expects 'interruptions'
  totalPauseDuration Int      @default(0) // in minutes
  plannedDuration   Int       // in minutes
  actualDuration    Int?      // in minutes
  productivityRating Int?     // 1-5 scale
  focusScore        Int?     // 1-10 scale
  sessionType       StudySessionType
  environment       String?  // Study environment (home, library, etc.)
  goals             String?  @db.Text
  achievements      String?  @db.Text
  notes             String?  @db.Text
  mood              Int?     // 1-5 scale
  energy           Int?      // 1-5 scale
  comprehension    Int?      // 1-5 scale

  @@index([userId, startedAt])
  @@index([taskId])
  @@map("studysession")
}

model UserBehavior {
  id          String   @id @default(cuid()) @map("id")
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String
  data        String   @db.Text
  timestamp   DateTime @default(now()) @map("createdAt")

  @@map("userbehavior")
}

model FlashcardDeck {
  id              String     @id @default(cuid()) @map("id")
  name            String
  description     String?    @db.Text
  course          String?
  subject         String?
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards           Flashcard[]
  totalCards      Int        @default(0)
  mastered        Int        @default(0)
  learning        Int        @default(0)
  needsReview     Int        @default(0)
  lastReviewDate  DateTime?
  nextReviewDate  DateTime?
  reviewInterval  Int        @default(1) // Days between reviews
  created         DateTime   @default(now())
  lastModified    DateTime   @updatedAt
  isPublic        Boolean    @default(false)
  isArchived      Boolean    @default(false)

  @@index([userId])
  @@index([lastReviewDate])
  @@map("flashcarddeck")
}

model Flashcard {
  id             String          @id @default(cuid()) @map("id")
  front          String          @db.Text
  back           String          @db.Text
  hints          String?         @db.Text
  tags           String          @db.Text  // Comma-separated tags
  deckId         String
  deck           FlashcardDeck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  profileId      String
  profile        Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  lastReviewed   DateTime?
  nextReview     DateTime?
  confidence     Int?            // 1-5 scale
  timesReviewed  Int            @default(0)
  correctStreak  Int            @default(0)
  easeFactor     Float          @default(2.5) // Supermemo algorithm ease factor
  interval       Int            @default(1)    // Days until next review
  created        DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  status         FlashcardStatus @default(NEW)
  mediaUrl       String?         // For images or audio attachments

  @@index([deckId])
  @@index([lastReviewed])
  @@index([nextReview])
  @@map("flashcard")
}

model Schedule {
  id           String   @id @default(cuid()) @map("id")
  taskId       String
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  profileId    String?
  profile      Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  start        DateTime?
  end          DateTime?
  aiConfidence  Float?   @map("aiConfidence")
  scheduleType  String?  @map("scheduleType")
  isFlexible   Boolean  @default(false)
  bufferBefore Int?     // Buffer time in minutes before the scheduled time
  bufferAfter  Int?     // Buffer time in minutes after the scheduled time
  priority     Int      @default(0)
  status       String   @default("SCHEDULED") // SCHEDULED, COMPLETED, MISSED, RESCHEDULED
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([start, end])
  @@index([taskId])
  @@map("schedule")
}

model Calendar {
  id               String    @id @default(cuid()) @map("id")
  name             String
  type             String    // "google", "local"
  userId           String
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  googleCalendarId String?
  accessToken      String?   @db.Text
  refreshToken     String?   @db.Text
  expiresAt        DateTime?
  syncToken        String?
  tasks            Task[]
  events           Event[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("calendar")
}

model Event {
  id            String      @id @default(cuid()) @map("id")
  title         String
  description   String?     @db.Text
  location      String?
  startTime     DateTime
  endTime       DateTime
  isAllDay      Boolean     @default(false)
  source        EventSource @default(LOCAL)
  googleEventId String?
  calendarId    String
  calendar      Calendar    @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  attendees     Json?       // Store attendees as JSON array
  recurrence    Json?       // Store recurrence rules as JSON
  status        String?     // e.g., "confirmed", "tentative", "cancelled"
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([googleEventId])
  @@index([startTime, endTime])
  @@map("event")
}

model AIInsight {
  id          String    @id @default(cuid()) @map("id")
  profileId   String
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  type        String
  data        Json
  insightData Json?    @map("insightData")
  expiresAt   DateTime?
  confidence  Float     @default(0.0)
  status      String    @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  priority    Int       @default(0)
  appliedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("aiinsight")
}

// Note: lowercase aIInsight model alias removed to avoid duplicate model definitions.
// Use the canonical AIInsight model for Prisma access.
// Note: lowercase alias for study sessions removed to avoid duplicate model definitions.
// Code references to prisma.studysession should work against the canonical StudySession model.

// Note: lowercase userbehavior model alias removed. Use UserBehavior model instead.
