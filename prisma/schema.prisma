// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  profile  Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id                String   @id @default(cuid())
  userId            String   @unique
  timezone          String   @default("UTC")
  studyPreferences  Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks           Task[]
  schedules       Schedule[]
  studySessions   StudySession[]
  userBehavior    UserBehavior[]
  aiInsights      AiInsight[]
  flashcards      Flashcard[]
}

model Task {
  id                String     @id @default(cuid())
  profileId         String
  title             String
  description       String?
  dueDate           DateTime?
  priority          Int        @default(3)
  status            TaskStatus @default(TODO)
  estimatedDuration Int?       // in minutes
  actualDuration    Int?       // in minutes
  subject           String?
  taskType          TaskType   @default(OTHER)
  tags              String[]   @default([])
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  profile       Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  schedules     Schedule[]
  studySessions StudySession[]

  @@index([profileId, status])
  @@index([profileId, dueDate])
  @@index([profileId, priority])
}

model Schedule {
  id             String       @id @default(cuid())
  taskId         String
  profileId      String
  scheduledStart DateTime
  scheduledEnd   DateTime
  scheduleType   ScheduleType @default(MANUAL)
  aiConfidence   Float?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  task    Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, scheduledStart])
}

model StudySession {
  id                 String            @id @default(cuid())
  taskId             String
  profileId          String
  sessionType        StudySessionType  @default(POMODORO)
  plannedDuration    Int               // in minutes
  actualDuration     Int?              // in minutes
  startedAt          DateTime          @default(now())
  completedAt        DateTime?
  interruptions      Int               @default(0)
  productivityRating Int?              // 1-5 scale
  notes              String?

  task    Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, startedAt])
}

model UserBehavior {
  id                String   @id @default(cuid())
  profileId         String
  actionType        String
  contextData       Json
  timestamp         DateTime @default(now())
  productivityScore Float?

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, timestamp])
}

model AiInsight {
  id              String         @id @default(cuid())
  profileId       String
  insightType     AiInsightType
  confidenceLevel Float
  insightData     Json
  createdAt       DateTime       @default(now())
  expiresAt       DateTime?

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, insightType])
  @@index([profileId, createdAt])
}

model Flashcard {
  id           String   @id @default(cuid())
  profileId    String
  deckName     String
  frontContent String
  backContent  String
  difficulty   Int      @default(2) // SRS difficulty
  interval     Int      @default(1) // Days until next review
  repetitions  Int      @default(0)
  easeFactor   Float    @default(2.5)
  nextReview   DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, deckName])
  @@index([profileId, nextReview])
}

// Enums
enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskType {
  ASSIGNMENT
  EXAM
  PROJECT
  READING
  OTHER
}

enum ScheduleType {
  MANUAL
  AI_GENERATED
  RECURRING
}

enum StudySessionType {
  POMODORO
  BREAK
  EXTENDED_FOCUS
  REVIEW
}

enum AiInsightType {
  WORKLOAD_PREDICTION
  DEADLINE_RISK
  PRODUCTIVITY_PATTERN
  STUDY_RECOMMENDATION
}