generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models (MISSING from your current schema)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For manual signup
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  profile  Profile?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id                String    @id @default(uuid())
  profileId         String
  title             String
  description       String?
  taskType          TaskType  @default(OTHER)
  priority          Int       @default(3)
  estimatedDuration Int?      // minutes
  actualDuration    Int?
  subject           String?
  tags              String[]  @default([])
  status            TaskStatus @default(PENDING)
  dueDate           DateTime?
  aiSuggestions     Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  profile       Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  schedules     Schedule[]
  studySessions StudySession[]
}

enum TaskType {
  ASSIGNMENT
  EXAM  
  PROJECT
  READING
  OTHER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model StudySession {
  id                  String    @id @default(uuid())
  taskId              String
  profileId           String
  sessionType         String
  plannedDuration     Int
  actualDuration      Int?
  startedAt           DateTime
  completedAt         DateTime?
  interruptions       Int       @default(0)
  productivityRating  Int?
  
  task    Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Schedule {
  id            String   @id @default(uuid())
  taskId        String
  profileId     String
  scheduledStart DateTime
  scheduledEnd   DateTime
  aiConfidence   Float?
  scheduleType   String
  
  task    Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model UserBehavior {
  id               String   @id @default(uuid())
  profileId        String
  actionType       String
  contextData      Json
  timestamp        DateTime @default(now())
  productivityScore Float?
  
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model AIInsight {
  id              String   @id @default(uuid())
  profileId       String
  insightType     String
  confidenceLevel Float
  insightData     Json
  createdAt       DateTime @default(now())
  expiresAt       DateTime?
  
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  email       String?   @unique
  displayName String?
  preferences Json      @default("{}")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks         Task[]
  studySessions StudySession[]
  schedules     Schedule[]
  userBehavior  UserBehavior[]
  aiInsights    AIInsight[]
}